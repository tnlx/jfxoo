plugins {
    id 'java-library'
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id "maven-publish"
    id 'signing'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

javafx {
    version = '21'
    modules = ['javafx.controls']
    configurations = ['compileOnly', 'testImplementation']
}

group 'io.github.tnlx'
version '0.1.0'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.squareup:javapoet:1.13.0'
    testImplementation 'com.squareup:javapoet:1.13.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    testImplementation 'com.google.testing.compile:compile-testing:0.19'
}

test {
    useJUnitPlatform()
    doFirst {
        jvmArgs = [
                '--add-opens', 'jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED'
        ]
    }
}

// OSSRH requires javadoc and sources https://central.sonatype.org/pages/requirements.html
java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        jfxoo(MavenPublication) {
            from(components.java)

            // POM metadata
            pom {
                name = artifactId
                description = "Generate JavaFX Form at compile time"
                url = "https://github.com/tnlx/jfxoo"
                licenses {
                    license {
                        name = "MIT"
                        url = "https://opensource.org/licenses/MIT"
                    }
                }
                developers {
                    developer {
                        id = "tnlx"
                        name = "Thuc Le"
                    }
                }
                scm {
                    connection = "scm:git:https://github.com/tnlx/jfxoo"
                    developerConnection = "scm:git:ssh://github.com/tnlx/jfxoo.git"
                    url = "https://github.com/tnlx/jfxoo"
                }
            }
        }
    }
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.jfxoo
}

// ./gradlew publishJfxooPublicationToLocalRepository
// tree ./build/pub/
publishing {
    repositories {
        maven {
            name = "local"
            url = rootProject.layout.buildDirectory.dir("pub")
        }
    }
}
