plugins {
    id 'java-library'
    id "maven-publish"
    id 'signing'
    id "io.github.gradle-nexus.publish-plugin" version "1.0.0"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

group 'io.github.tnlx'
version '0.1.0'

repositories {
    mavenCentral()
}

import org.apache.tools.ant.taskdefs.condition.Os
def jfxClassifier
task os(){
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        jfxClassifier = 'win'
    } else if (Os.isFamily(Os.FAMILY_MAC)) {
        jfxClassifier = 'mac'
    } else {
        jfxClassifier = 'linux'
    }
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
    implementation 'com.squareup:javapoet:1.13.0'
    testImplementation 'com.squareup:javapoet:1.13.0'
    compileOnly "org.openjfx:javafx-base:18:${jfxClassifier}"
    compileOnly "org.openjfx:javafx-controls:18:${jfxClassifier}"
    compileOnly "org.openjfx:javafx-graphics:18:${jfxClassifier}"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    testImplementation 'com.google.testing.compile:compile-testing:0.19'
    testImplementation "org.openjfx:javafx-base:18:${jfxClassifier}"
    testImplementation "org.openjfx:javafx-controls:18:${jfxClassifier}"
    testImplementation "org.openjfx:javafx-graphics:18:${jfxClassifier}"
}

test {
    useJUnitPlatform()
    doFirst {
        jvmArgs = [
                '--add-opens', 'jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED'
        ]
    }
}


// OSSRH requires javadoc and sources https://central.sonatype.org/pages/requirements.html
java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        jfxooMaven(MavenPublication) {
            groupId = project.group.toString()
            artifactId = rootProject.name
            version = project.version.toString()

            from(components.java)

            // POM metadata
            pom {
                name = artifactId
                description = "Generate JavaFX form at compile time"
                url = "https://github.com/tnlx/jfxoo"
                licenses {
                    license {
                        name = "MIT"
                        url = "https://opensource.org/licenses/MIT"
                    }
                }
                developers {
                    developer {
                        id = "tnlx"
                        name = "Thuc Le"
                    }
                }
                scm {
                    connection = "scm:git:https://github.com/tnlx/jfxoo"
                    developerConnection = "scm:git:ssh://github.com/tnlx/jfxoo.git"
                    url = "https://github.com/tnlx/jfxoo"
                }
            }
        }
    }
}

signing {
    required { project.gradle.taskGraph.hasTask("required") }
    def signingKey = System.getenv("SIGNING_KEY")
    def signingPassword = System.getenv("SIGNING_PASSWORD")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.jfxooMaven
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl = uri("https://s01.oss.sonatype.org/service/local/")
            snapshotRepositoryUrl = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
            username = System.getenv("OSSRH_USERNAME")
            password = System.getenv("OSSRH_PASSWORD")
        }
    }
}

// ./gradlew publishJfxooMavenPublicationToLocalRepository
// tree ./build/repos/
publishing {
    repositories {
        maven {
            name = "local"
            def releasesRepoUrl = "$buildDir/repos/releases"
            def snapshotsRepoUrl = "$buildDir/repos/snapshots"
            url = version.endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}